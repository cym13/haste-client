#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
haste - a CLI client for Haste server.

Usage:
    haste [-r] [-]
    haste [-r] [-o NAME] FILE

-             read from stdin.
FILE          read from a file
              if FILE is a hastebin url, download the file

-h --help           show this message.
-v --version        show version information.
-r --raw            return a URL to the raw paste data.
-o --output NAME    name of the output file when downloading
"""
__version__ = '1.0.1'

import sys
# For Python 2 set default encoding to 'UTF-8' instead of 'ascii'.
# http://stackoverflow.com/q/11741574/2217862
if sys.version_info < (3, 0):
    reload(sys)
    sys.setdefaultencoding('utf-8')

import json
import requests
from docopt import docopt
from os.path import expanduser
from requests.exceptions import Timeout
from sys import stdin, exit

CONFIGS = [expanduser('~/.hastec'), '/etc/hastec.conf']
DEFAULTS = {
    'server_url': "http://hastebin.com",
    'timeout': 3
}


def main(**kwargs):
    config = load_config()

    if kwargs['FILE'] and config['server_url'].split('/')[-1] in kwargs['FILE']:
        download_snippet(kwargs['FILE'], kwargs['--output'], config['timeout'])

    else:
        filesrc = kwargs['FILE'] and kwargs['FILE'] != '-'
        data = read_file(kwargs['FILE']) if filesrc else read_stdin()
        url = create_snippet(data,
                             config['server_url'],
                             config['timeout'],
                             kwargs['--raw'])
        print(url)


def create_snippet(data, baseurl, timeout, raw):
    """
    Creates snippet with the given data on the haste server specified by the
    baseurl and returns URL of the created snippet.
    """
    try:
        url = baseurl + "/documents"
        response = requests.post(url, data.encode('utf-8'), timeout=timeout)
    except Timeout:
        exit("Error: connection timed out")

    dockey = json.loads(response.text)['key']
    return baseurl + ("/raw/" if raw else "/") + dockey


def download_snippet(url, destination, timeout):
    """
    Download the snippet from `url' to `destination'
    """
    server, raw, snip_id = url.split('/')[-3:]
    if server == "":
        server = raw

    dl_url = "http://%s/raw/%s" % (server, snip_id)

    try:
        response = requests.get(dl_url, timeout=timeout)
    except Timeout:
        exit("Error: connection timed out")

    if destination is None:
        destination = "%s.txt" % snip_id

    if response.ok:
        try:
            open(expanduser(destination), "w").write(response.text)
            print(destination)
        except PermissionError as e:
            exit("Error: permission denied")

    else:
        exit("Error: page not found")


def read_stdin():
    return "".join(stdin.readlines()).strip()


def read_file(path):
    try:
        with open(path, 'r') as f:
            return "".join(f.readlines()).strip()
    except:
        exit("Error: file '%s' is not readable!" % path)


def load_config():
    """
    Loads configuration from the first readable file specified by the CONFIGS
    list and merges it with DEFAULTS. If any of the files is not readable, then
    it simply returns DEFAULTS.
    """
    config = {}
    for path in CONFIGS:
        try:
            config = parse_config(path)
            break
        except: pass

    # merge and override tuples from DEFAULTS by config
    return dict(DEFAULTS, **config)


def parse_config(path):
    """
    Parses key=value pairs from the given file and returns them as dict.
    Lines that starts with '#' (leading whitespaces are stripped) or doesn't
    contain '=' are ignored. Whitespaces around keys and values are stripped.
    """
    with open(path, 'r') as f:
        return { k.strip(): v.strip()
                for k, v in (
                    line.split('=', 1) for line in f
                    if '=' in line and line.strip()[:1] != '#') }


kwargs = docopt(__doc__, version='haste ' + __version__)

if __name__ == "__main__":
    main(**kwargs)
